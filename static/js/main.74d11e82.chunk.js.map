{"version":3,"sources":["Cell.js","Map.js","App.js","serviceWorker.js","lib/map.js","reducers/map.js","index.js"],"names":["cellClickType","cellActionType","Cell","state","ref","attachRef","_this","setState","_this$props","this","props","onClickCell","cell","classes","selected","push","unit","disabled","inRange","react_default","a","createElement","Fragment","id","concat","y","x","className","join","onClick","renderOverlay","_this$props2","onCellAction","actions","Overlay","target","show","placement","_ref2","Object","objectWithoutProperties","Popover","ListGroup","variant","entries","map","_ref3","_ref4","slicedToArray","action","label","Item","as","key","React","Component","connect","ownProps","row","col","dispatch","_ref","type","Map","renderRow","cols","_","src_Cell","rows","length","endTurnType","App","endTurn","src_Map","Button","Boolean","window","location","hostname","match","getSelected","selectCell","resetMap","forEach","cell1","cell2","range","Math","abs","selectUnit","result","makeMap","reducer","combineReducers","arguments","undefined","produce","resetActions","move","cancel","clickCell","getTarget","src","dest","moveUnit","cellAction","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","logger","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.74d11e82.chunk.js","sourcesContent":["import React from \"react\";\nimport { ListGroup, Overlay, Popover } from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\n\nfunction mapStateToProps(state, ownProps) {\n  const { row, col } = ownProps;\n\n  return { cell: state.map[row][col] };\n}\n\nexport const cellClickType = \"cell:click\";\nexport const cellActionType = \"cell:action\";\n\nconst mapDispatchToProps = (dispatch, { row, col }) => ({\n  onClickCell: () => dispatch({ type: cellClickType, row, col }),\n  onCellAction: action => dispatch({ type: cellActionType, action })\n});\n\nclass Cell extends React.Component {\n  state = { ref: null };\n\n  attachRef = ref => this.setState({ ref });\n\n  render() {\n    const { onClickCell, cell } = this.props;\n\n    const classes = [\"aw-map-cell\"];\n\n    if (cell.selected) {\n      classes.push(\"selected\");\n    }\n    if (cell.unit) {\n      classes.push(cell.unit.disabled ? \"unit-disabled\" : \"mech\");\n    }\n    if (cell.inRange) {\n      classes.push(\"in-range\");\n    }\n\n    return (\n      <React.Fragment>\n        <div\n          ref={this.attachRef}\n          id={`cell-${cell.y}-${cell.x}`}\n          className={classes.join(\" \")}\n          onClick={onClickCell}\n        />\n        {this.renderOverlay()}\n      </React.Fragment>\n    );\n  }\n\n  renderOverlay() {\n    const {\n      onCellAction,\n      cell: { actions }\n    } = this.props;\n    const { ref } = this.state;\n    if (!actions) return null;\n\n    return (\n      <Overlay target={ref} show placement=\"bottom\">\n        {({ show, ...props }) => (\n          <Popover {...props}>\n            <ListGroup variant=\"flush\">\n              {Object.entries(actions).map(([action, label]) => (\n                <ListGroup.Item\n                  action\n                  as=\"li\"\n                  key={action}\n                  onClick={() => onCellAction(action)}\n                >\n                  {label}\n                </ListGroup.Item>\n              ))}\n            </ListGroup>\n          </Popover>\n        )}\n      </Overlay>\n    );\n  }\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Cell);\n","import * as _ from \"lodash\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport Cell from \"./Cell\";\n\nfunction mapStateToProps(state) {\n  return {\n    rows: state.map.length,\n    cols: state.map[0].length\n  };\n}\n\nclass Map extends React.Component {\n  render() {\n    const { rows } = this.props;\n    return <div>{_.range(rows).map(this.renderRow)}</div>;\n  }\n\n  renderRow = row => {\n    const { cols } = this.props;\n\n    return (\n      <div className=\"aw-map-row\" key={row}>\n        {_.range(cols).map(col => (\n          <Cell row={row} col={col} key={`${row}-${col}`} />\n        ))}\n      </div>\n    );\n  };\n}\n\nexport default connect(mapStateToProps)(Map);\n","import React from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\nimport Map from \"./Map\";\n\nexport const endTurnType = \"game:endTurn\";\n\nconst mapDispatchToProps = dispatch => ({\n  endTurn: () => dispatch({ type: endTurnType })\n});\n\nclass App extends React.Component {\n  render() {\n    const { endTurn } = this.props;\n    return (\n      <div>\n        <Map />\n        <Button onClick={endTurn}>End turn</Button>\n      </div>\n    );\n  }\n}\n\nexport default connect(\n  null,\n  mapDispatchToProps\n)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export function makeMap(rows, cols) {\n  const result = [];\n\n  for (let y = 0; y < rows; y++) {\n    const row = [];\n    for (let x = 0; x < cols; x++) {\n      row.push({ type: \"plain\", x, y });\n    }\n    result.push(row);\n  }\n\n  return result;\n}\n\nexport function getSelected(map) {\n  for (let y = 0; y < map.length; y++) {\n    const row = map[y];\n    for (let x = 0; x < row.length; x++) {\n      const cell = row[x];\n      if (cell.selected) return cell;\n    }\n  }\n  return null;\n}\n\nexport function getTarget(map) {\n  for (let y = 0; y < map.length; y++) {\n    const row = map[y];\n    for (let x = 0; x < row.length; x++) {\n      const cell = row[x];\n      if (cell.actions) return cell;\n    }\n  }\n  return null;\n}\n\nfunction isInRange(cell1, cell2, range) {\n  const xd = Math.abs(cell1.x - cell2.x);\n  const yd = Math.abs(cell1.y - cell2.y);\n\n  return xd + yd <= range;\n}\n\nexport function selectCell(map, x, y) {\n  resetMap(map);\n  const cell = map[y][x];\n  if (cell.unit && !cell.unit.disabled) {\n    selectUnit(map, x, y);\n  }\n}\n\nexport function resetMap(map) {\n  return map.forEach(row => {\n    row.forEach(cell => {\n      cell.selected = false;\n      cell.inRange = false;\n      cell.actions = null;\n    });\n  });\n}\n\nexport function resetActions(map) {\n  return map.forEach(row => {\n    row.forEach(cell => {\n      cell.actions = null;\n    });\n  });\n}\n\nexport function endTurn(map) {\n  return map.forEach(row => {\n    row.forEach(cell => {\n      if (cell.unit) {\n        cell.unit.disabled = false;\n      }\n    });\n  });\n}\n\nfunction selectUnit(map, x, y) {\n  return map.forEach(row => {\n    row.forEach(cell => {\n      if (cell.x === x && cell.y === y) {\n        cell.selected = true;\n      } else if (isInRange(cell, { x, y }, 2)) {\n        cell.inRange = true;\n      }\n    });\n  });\n}\n\nexport function moveUnit(src, dest) {\n  if (dest.unit) return;\n  const { unit } = src;\n  src.unit = null;\n\n  unit.x = dest.x;\n  unit.y = dest.y;\n  unit.disabled = true;\n  dest.unit = unit;\n}","import { produce } from \"immer\";\nimport { endTurnType } from \"../App\";\nimport { cellActionType, cellClickType } from \"../Cell\";\nimport {\n  endTurn,\n  getSelected,\n  getTarget,\n  makeMap,\n  moveUnit,\n  resetActions,\n  resetMap,\n  selectCell\n} from \"../lib/map\";\n\nconst map = makeMap(7, 7);\nmap[3][2].unit = { type: \"mech\", x: 2, y: 3 };\nmap[5][5].unit = { type: \"mech\", x: 5, y: 5 };\n\nfunction clickCell(map, { row, col }) {\n  const selected = getSelected(map);\n  if (!selected) {\n    selectCell(map, col, row);\n  } else {\n    const cell = map[row][col];\n\n    if (cell.inRange) {\n      resetActions(map);\n      cell.actions = { move: \"Move\", cancel: \"Cancel\" };\n    } else {\n      resetMap(map);\n    }\n  }\n}\n\nfunction cellAction(map, { action }) {\n  const selected = getSelected(map);\n  const target = getTarget(map);\n\n  if (action === \"move\") {\n    moveUnit(selected, target);\n  }\n  resetMap(map);\n}\n\nexport default function mapReducer(state = map, action) {\n  switch (action.type) {\n    case cellClickType:\n      return produce(state, map => clickCell(map, action));\n    case cellActionType:\n      return produce(state, map => cellAction(map, action));\n    case endTurnType:\n      return produce(state, endTurn);\n    default:\n      return state;\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { applyMiddleware, combineReducers, compose, createStore } from \"redux\";\nimport { logger } from \"redux-logger\";\nimport App from \"./App\";\nimport \"./index.scss\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport map from \"./reducers/map\";\n\nconst reducer = combineReducers({ map });\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(reducer, composeEnhancers(applyMiddleware(logger)));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}