{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Cell","_this$props","this","props","onClick","cell","classes","selected","push","unit","inRange","react_default","a","createElement","className","join","React","Component","makeMap","rows","cols","result","y","row","x","type","selectCell","map","resetMap","forEach","cell1","cell2","range","Math","abs","selectUnit","App","state","produce","draft","setState","_ref","length","getSelected","src","dest","moveUnit","_this2","index","key","App_Cell","concat","handleClick","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.685087e3.chunk.js","sourcesContent":["import React from 'react';\nimport produce from 'immer';\n\nclass Cell extends React.Component {\n  render() {\n    const { onClick, cell } = this.props;\n    const classes = ['aw-map-cell'];\n\n    if (cell.selected) {\n      classes.push('selected');\n    }\n    if (cell.unit) {\n      classes.push('mech');\n    }\n    if (cell.inRange) {\n      classes.push('in-range');\n    }\n\n    return <div className={classes.join(' ')} onClick={onClick} />;\n  }\n}\n\nfunction makeMap(rows, cols) {\n  const result = [];\n\n  for (let y = 0; y < rows; y++) {\n    const row = [];\n    for (let x = 0; x < cols; x++) {\n      row.push({ type: 'plain', x, y });\n    }\n    result.push(row);\n  }\n\n  return result;\n}\n\nfunction addUnit(map, unit) {\n  return produce(map, draft => {\n    draft[unit.y][unit.x].unit = unit;\n  });\n}\n\nfunction getSelected(map) {\n  for (let y = 0; y < map.length; y++) {\n    const row = map[y];\n    for (let x = 0; x < row.length; x++) {\n      const cell = row[x];\n      if (cell.selected) return cell;\n    }\n  }\n  return null;\n}\n\nfunction isInRange(cell1, cell2, range) {\n  const xd = Math.abs(cell1.x - cell2.x);\n  const yd = Math.abs(cell1.y - cell2.y);\n\n  return xd + yd <= range;\n}\n\nfunction selectCell(map, x, y) {\n  resetMap(map);\n  const cell = map[y][x];\n  if (cell.unit) {\n    selectUnit(map, x, y);\n  }\n}\n\nfunction resetMap(map) {\n  return map.forEach(row => {\n    row.forEach(cell => {\n      cell.selected = false;\n      cell.inRange = false;\n    });\n  });\n}\n\nfunction selectUnit(map, x, y) {\n  return map.forEach(row => {\n    row.forEach(cell => {\n      if (cell.x === x && cell.y === y) {\n        cell.selected = true;\n      } else if (isInRange(cell, { x, y }, 2)) {\n        cell.inRange = true;\n      }\n    });\n  });\n}\n\nfunction moveUnit(src, dest) {\n  const { unit } = src;\n  src.unit = null;\n\n  unit.x = dest.x;\n  unit.y = dest.y;\n  dest.unit = unit;\n}\n\nclass App extends React.Component {\n  state = { map: addUnit(makeMap(7, 7), { type: 'mech', x: 2, y: 3 }) };\n\n  handleClick(x, y) {\n    this.setState(\n      produce(({ map }) => {\n        const selected = getSelected(map);\n        if (!selected) {\n          selectCell(map, x, y);\n        } else {\n          const cell = map[y][x];\n          if (cell.inRange) {\n            moveUnit(selected, cell);\n          }\n          resetMap(map);\n        }\n      })\n    );\n  }\n\n  render() {\n    const { map } = this.state;\n    return (\n      <div>\n        {map.map((row, index) => (\n          <div className=\"aw-map-row\" key={index}>\n            {row.map(cell => (\n              <Cell\n                cell={cell}\n                key={`${cell.y},${cell.x}`}\n                onClick={() => this.handleClick(cell.x, cell.y)}\n              />\n            ))}\n          </div>\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}