{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Cell","state","ref","attachRef","_this","setState","_this$props","this","props","onAction","onClick","cell","classes","selected","push","unit","inRange","react_default","a","createElement","Fragment","id","concat","y","x","className","join","Overlay","target","show","actions","placement","_ref","Object","objectWithoutProperties","Popover","ListGroup","variant","entries","map","_ref2","_ref3","slicedToArray","action","label","Item","as","key","React","Component","makeMap","rows","cols","result","row","type","getSelected","length","selectCell","resetMap","forEach","cell1","cell2","range","Math","abs","selectUnit","App","handleAction","_this2","produce","_ref4","getTarget","console","log","src","dest","moveUnit","_ref5","_ref6","move","cancel","_this3","index","App_Cell","handleClick","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6RAIMA,6MACJC,MAAQ,CAAEC,IAAK,QAEfC,UAAY,SAAAD,GAAG,OAAIE,EAAKC,SAAS,CAAEH,iFAE1B,IAAAI,EAC6BC,KAAKC,MAAjCC,EADDH,EACCG,SAAUC,EADXJ,EACWI,QAASC,EADpBL,EACoBK,KACnBT,EAAQK,KAAKN,MAAbC,IAEFU,EAAU,CAAC,eAYjB,OAVID,EAAKE,UACPD,EAAQE,KAAK,YAEXH,EAAKI,MACPH,EAAQE,KAAK,QAEXH,EAAKK,SACPJ,EAAQE,KAAK,YAIbG,EAAAC,EAAAC,cAACF,EAAAC,EAAME,SAAP,KACEH,EAAAC,EAAAC,cAAA,OACEjB,IAAKK,KAAKJ,UACVkB,GAAE,QAAAC,OAAUX,EAAKY,EAAf,KAAAD,OAAoBX,EAAKa,GAC3BC,UAAWb,EAAQc,KAAK,KACxBhB,QAASA,IAEXO,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAASC,OAAQ1B,EAAK2B,OAAQlB,EAAKmB,QAASC,UAAU,UACnD,SAAAC,KAAGH,KAAH,IAAYrB,EAAZyB,OAAAC,EAAA,EAAAD,CAAAD,EAAA,iBACCf,EAAAC,EAAAC,cAACgB,EAAA,EAAY3B,EACXS,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CAAWC,QAAQ,SAChB1B,EAAKmB,SACJG,OAAOK,QAAQ3B,EAAKmB,SAASS,IAAI,SAAAC,GAAA,IAAAC,EAAAR,OAAAS,EAAA,EAAAT,CAAAO,EAAA,GAAEG,EAAFF,EAAA,GAAUG,EAAVH,EAAA,UAC/BxB,EAAAC,EAAAC,cAACiB,EAAA,EAAUS,KAAX,CACEF,QAAM,EACNG,GAAG,KACHC,IAAKJ,EACLjC,QAAS,kBAAMD,EAASkC,KAEvBC,iBAzCJI,IAAMC,WAqDzB,SAASC,EAAQC,EAAMC,GAGrB,IAFA,IAAMC,EAAS,GAEN9B,EAAI,EAAGA,EAAI4B,EAAM5B,IAAK,CAE7B,IADA,IAAM+B,EAAM,GACH9B,EAAI,EAAGA,EAAI4B,EAAM5B,IACxB8B,EAAIxC,KAAK,CAAEyC,KAAM,QAAS/B,IAAGD,MAE/B8B,EAAOvC,KAAKwC,GAGd,OAAOD,EAGT,SAASG,EAAYjB,GACnB,IAAK,IAAIhB,EAAI,EAAGA,EAAIgB,EAAIkB,OAAQlC,IAE9B,IADA,IAAM+B,EAAMf,EAAIhB,GACPC,EAAI,EAAGA,EAAI8B,EAAIG,OAAQjC,IAAK,CACnC,IAAMb,EAAO2C,EAAI9B,GACjB,GAAIb,EAAKE,SAAU,OAAOF,EAG9B,OAAO,KAqBT,SAAS+C,EAAWnB,EAAKf,EAAGD,GAC1BoC,EAASpB,GACIA,EAAIhB,GAAGC,GACXT,MAeX,SAAoBwB,EAAKf,EAAGD,GACnBgB,EAAIqB,QAAQ,SAAAN,GACjBA,EAAIM,QAAQ,SAAAjD,GA3BhB,IAAmBkD,EAAOC,EAAOC,EA4BvBpD,EAAKa,IAAMA,GAAKb,EAAKY,IAAMA,EAC7BZ,EAAKE,UAAW,GA7BLgD,EA8BQlD,EA9BDmD,EA8BO,CAAEtC,IAAGD,KA9BLwC,EA8BU,EA7B9BC,KAAKC,IAAIJ,EAAMrC,EAAIsC,EAAMtC,GACzBwC,KAAKC,IAAIJ,EAAMtC,EAAIuC,EAAMvC,IAElBwC,IA2BZpD,EAAKK,SAAU,QApBnBkD,CAAW3B,EAAKf,EAAGD,GAIvB,SAASoC,EAASpB,GAChB,OAAOA,EAAIqB,QAAQ,SAAAN,GACjBA,EAAIM,QAAQ,SAAAjD,GACVA,EAAKE,UAAW,EAChBF,EAAKK,SAAU,EACfL,EAAKmB,QAAU,aA8FNqC,6MAlEblE,MAAQ,CAAEsC,IAAKW,EAAQ,EAAG,MA8B1BkB,aAAe,SAAAzB,GACb0B,EAAKhE,SACHiE,YAAQ,SAAAC,GAAa,IAAVhC,EAAUgC,EAAVhC,IACH1B,EAAW2C,EAAYjB,GACvBX,EA7Fd,SAAmBW,GACjB,IAAK,IAAIhB,EAAI,EAAGA,EAAIgB,EAAIkB,OAAQlC,IAE9B,IADA,IAAM+B,EAAMf,EAAIhB,GACPC,EAAI,EAAGA,EAAI8B,EAAIG,OAAQjC,IAAK,CACnC,IAAMb,EAAO2C,EAAI9B,GACjB,GAAIb,EAAKmB,QAAS,OAAOnB,EAG7B,OAAO,KAqFc6D,CAAUjC,GACzBkC,QAAQC,IAAI7D,EAAUe,GAEP,SAAXe,GAhDZ,SAAkBgC,EAAKC,GACrB,IAAIA,EAAK7D,KAAT,CAD2B,IAEnBA,EAAS4D,EAAT5D,KACR4D,EAAI5D,KAAO,KAEXA,EAAKS,EAAIoD,EAAKpD,EACdT,EAAKQ,EAAIqD,EAAKrD,EACdqD,EAAK7D,KAAOA,GA0CJ8D,CAAShE,EAAUe,GAErB+B,EAASpB,0FArCbhC,KAAKF,SACHiE,YAAQ,SAAAQ,GAAa,IAAVvC,EAAUuC,EAAVvC,IACTA,EAAI,GAAG,GAAGxB,KAAO,CAAEwC,KAAM,OAAQ/B,EAAG,EAAGD,EAAG,GAC1CgB,EAAI,GAAG,GAAGxB,KAAO,CAAEwC,KAAM,OAAQ/B,EAAG,EAAGD,EAAG,0CAKpCC,EAAGD,GACbhB,KAAKF,SACHiE,YAAQ,SAAAS,GAAa,IAAVxC,EAAUwC,EAAVxC,IAET,GADiBiB,EAAYjB,GAGtB,CACL,IAAM5B,EAAO4B,EAAIhB,GAAGC,GAEhBb,EAAKK,QACPL,EAAKmB,QAAU,CAAEkD,KAAM,OAAQC,OAAQ,UAEvCtB,EAASpB,QAPXmB,EAAWnB,EAAKf,EAAGD,uCA6BlB,IAAA2D,EAAA3E,KACCgC,EAAQhC,KAAKN,MAAbsC,IACR,OACEtB,EAAAC,EAAAC,cAAA,WACGoB,EAAIA,IAAI,SAACe,EAAK6B,GAAN,OACPlE,EAAAC,EAAAC,cAAA,OAAKM,UAAU,aAAasB,IAAKoC,GAC9B7B,EAAIf,IAAI,SAAA5B,GAAI,OACXM,EAAAC,EAAAC,cAACiE,EAAD,CACEzE,KAAMA,EACNoC,IAAG,GAAAzB,OAAKX,EAAKY,EAAV,KAAAD,OAAeX,EAAKa,GACvBd,QAAS,kBAAMwE,EAAKG,YAAY1E,EAAKa,EAAGb,EAAKY,IAC7Cd,SAAUyE,EAAKd,4BAzDbpB,IAAMC,WChIJqC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3E,EAAAC,EAAAC,cAAC0E,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.ce59500d.chunk.js","sourcesContent":["import produce from 'immer';\nimport React from 'react';\nimport { Overlay, Popover, ListGroup } from 'react-bootstrap';\n\nclass Cell extends React.Component {\n  state = { ref: null };\n\n  attachRef = ref => this.setState({ ref });\n\n  render() {\n    const { onAction, onClick, cell } = this.props;\n    const { ref } = this.state;\n\n    const classes = ['aw-map-cell'];\n\n    if (cell.selected) {\n      classes.push('selected');\n    }\n    if (cell.unit) {\n      classes.push('mech');\n    }\n    if (cell.inRange) {\n      classes.push('in-range');\n    }\n\n    return (\n      <React.Fragment>\n        <div\n          ref={this.attachRef}\n          id={`cell-${cell.y}-${cell.x}`}\n          className={classes.join(' ')}\n          onClick={onClick}\n        />\n        <Overlay target={ref} show={!!cell.actions} placement=\"bottom\">\n          {({ show, ...props }) => (\n            <Popover {...props}>\n              <ListGroup variant=\"flush\">\n                {cell.actions &&\n                  Object.entries(cell.actions).map(([action, label]) => (\n                    <ListGroup.Item\n                      action\n                      as=\"li\"\n                      key={action}\n                      onClick={() => onAction(action)}\n                    >\n                      {label}\n                    </ListGroup.Item>\n                  ))}\n              </ListGroup>\n            </Popover>\n          )}\n        </Overlay>\n      </React.Fragment>\n    );\n  }\n}\n\nfunction makeMap(rows, cols) {\n  const result = [];\n\n  for (let y = 0; y < rows; y++) {\n    const row = [];\n    for (let x = 0; x < cols; x++) {\n      row.push({ type: 'plain', x, y });\n    }\n    result.push(row);\n  }\n\n  return result;\n}\n\nfunction getSelected(map) {\n  for (let y = 0; y < map.length; y++) {\n    const row = map[y];\n    for (let x = 0; x < row.length; x++) {\n      const cell = row[x];\n      if (cell.selected) return cell;\n    }\n  }\n  return null;\n}\n\nfunction getTarget(map) {\n  for (let y = 0; y < map.length; y++) {\n    const row = map[y];\n    for (let x = 0; x < row.length; x++) {\n      const cell = row[x];\n      if (cell.actions) return cell;\n    }\n  }\n  return null;\n}\n\nfunction isInRange(cell1, cell2, range) {\n  const xd = Math.abs(cell1.x - cell2.x);\n  const yd = Math.abs(cell1.y - cell2.y);\n\n  return xd + yd <= range;\n}\n\nfunction selectCell(map, x, y) {\n  resetMap(map);\n  const cell = map[y][x];\n  if (cell.unit) {\n    selectUnit(map, x, y);\n  }\n}\n\nfunction resetMap(map) {\n  return map.forEach(row => {\n    row.forEach(cell => {\n      cell.selected = false;\n      cell.inRange = false;\n      cell.actions = null;\n    });\n  });\n}\n\nfunction selectUnit(map, x, y) {\n  return map.forEach(row => {\n    row.forEach(cell => {\n      if (cell.x === x && cell.y === y) {\n        cell.selected = true;\n      } else if (isInRange(cell, { x, y }, 2)) {\n        cell.inRange = true;\n      }\n    });\n  });\n}\n\nfunction moveUnit(src, dest) {\n  if (dest.unit) return;\n  const { unit } = src;\n  src.unit = null;\n\n  unit.x = dest.x;\n  unit.y = dest.y;\n  dest.unit = unit;\n}\n\nclass App extends React.Component {\n  state = { map: makeMap(7, 7) };\n\n  componentDidMount() {\n    this.setState(\n      produce(({ map }) => {\n        map[3][2].unit = { type: 'mech', x: 2, y: 3 };\n        map[5][5].unit = { type: 'mech', x: 5, y: 5 };\n      })\n    );\n  }\n\n  handleClick(x, y) {\n    this.setState(\n      produce(({ map }) => {\n        const selected = getSelected(map);\n        if (!selected) {\n          selectCell(map, x, y);\n        } else {\n          const cell = map[y][x];\n\n          if (cell.inRange) {\n            cell.actions = { move: 'Move', cancel: 'Cancel' };\n          } else {\n            resetMap(map);\n          }\n        }\n      })\n    );\n  }\n\n  handleAction = action => {\n    this.setState(\n      produce(({ map }) => {\n        const selected = getSelected(map);\n        const target = getTarget(map);\n        console.log(selected, target);\n\n        if (action === 'move') {\n          moveUnit(selected, target);\n        }\n        resetMap(map);\n      })\n    );\n  };\n\n  render() {\n    const { map } = this.state;\n    return (\n      <div>\n        {map.map((row, index) => (\n          <div className=\"aw-map-row\" key={index}>\n            {row.map(cell => (\n              <Cell\n                cell={cell}\n                key={`${cell.y},${cell.x}`}\n                onClick={() => this.handleClick(cell.x, cell.y)}\n                onAction={this.handleAction}\n              />\n            ))}\n          </div>\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}